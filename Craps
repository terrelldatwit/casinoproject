import sys
import os
import random
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget,
    QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QLineEdit, QComboBox,
    QTextEdit, QMessageBox
)
from PyQt5.QtGui import QPixmap

class CrapsWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Craps Game - PyQt5")
        self.setFixedSize(400, 500)

        self.balance = 100
        self.bet = 0
        self.bet_type = ""
        self.point = None

        self.setup_ui()

    def setup_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)

        main_layout = QVBoxLayout()

        self.balance_label = QLabel(f"Balance: ${self.balance}")
        main_layout.addWidget(self.balance_label)

        bet_layout = QHBoxLayout()
        self.bet_input = QLineEdit()
        self.bet_input.setPlaceholderText("Enter bet amount")
        self.bet_type_combo = QComboBox()
        self.bet_type_combo.addItems([
            "Pass Line", "Don't Pass", "Field",
            "Any 7", "Craps",
            "Hard 4", "Hard 6", "Hard 8",
            "Big 6 & 8"
        ])
        self.place_bet_btn = QPushButton("Place Bet")
        self.place_bet_btn.clicked.connect(self.place_bet)
        bet_layout.addWidget(self.bet_input)
        bet_layout.addWidget(self.bet_type_combo)
        bet_layout.addWidget(self.place_bet_btn)
        main_layout.addLayout(bet_layout)

        dice_layout = QHBoxLayout()
        self.die1_label = QLabel()
        self.die2_label = QLabel()
        for lbl in (self.die1_label, self.die2_label):
            lbl.setFixedSize(64, 64)
            dice_layout.addWidget(lbl)
        main_layout.addLayout(dice_layout)

        self.roll_button = QPushButton("Roll Dice")
        self.roll_button.setEnabled(False)
        self.roll_button.clicked.connect(self.roll_dice)
        main_layout.addWidget(self.roll_button)

        self.output_box = QTextEdit()
        self.output_box.setReadOnly(True)
        main_layout.addWidget(self.output_box)

        main_widget.setLayout(main_layout)

    def log(self, message):
        self.output_box.append(message)

    def place_bet(self):
        try:
            amt = int(self.bet_input.text())
            if amt <= 0 or amt > self.balance:
                raise ValueError
        except ValueError:
            QMessageBox.warning(self, "Invalid Bet", "Enter a valid bet amount within your balance.")
            return

        self.bet = amt
        self.bet_type = self.bet_type_combo.currentText()
        self.balance -= self.bet
        self.update_balance()
        self.log(f"Bet ${self.bet} on {self.bet_type}")
        self.roll_button.setEnabled(True)

    def roll_dice(self):
        d1, d2 = random.randint(1, 6), random.randint(1, 6)
        total = d1 + d2
        self.update_dice_images(d1, d2)
        self.resolve_bet(total, d1, d2)

    def update_dice_images(self, d1, d2):
        try:
            pix1 = QPixmap(os.path.abspath(f"dice{d1}.png")).scaled(64, 64)
            pix2 = QPixmap(os.path.abspath(f"dice{d2}.png")).scaled(64, 64)
            self.die1_label.setPixmap(pix1)
            self.die2_label.setPixmap(pix2)
        except Exception as e:
            self.log(f"Error loading dice images: {e}")

    def resolve_bet(self, total, d1, d2):
        # --- Pass Line ---
        if self.bet_type == "Pass Line":
            if self.point is None:
                if total in (7, 11):
                    self.win("Pass Line wins!")
                elif total in (2, 3, 12):
                    self.log("Craps! Pass Line loses.")
                else:
                    self.point = total
                    self.log(f"Point is now {self.point}")
                    return
            else:
                if total == self.point:
                    self.win("Point hit! Pass Line wins.")
                    self.point = None
                elif total == 7:
                    self.log("Seven-out. Pass Line loses.")
                    self.point = None
                else:
                    return

        # --- Don't Pass ---
        elif self.bet_type == "Don't Pass":
            if self.point is None:
                if total in (2, 3):
                    self.win("Don't Pass wins!")
                elif total == 12:
                    self.log("Push on 12.") 
                    self.balance += self.bet
                elif total in (7, 11):
                    self.log("Don't Pass loses.")
                else:
                    self.point = total
                    self.log(f"Point is now {self.point}")
                    return
            else:
                if total == self.point:
                    self.log("Point hit. Don't Pass loses.")
                    self.point = None
                elif total == 7:
                    self.win("Seven-out! Don't Pass wins.")
                    self.point = None
                else:
                    return

        # --- Field ---
        elif self.bet_type == "Field":
            if total in (3, 4, 9, 10, 11):
                self.win("Field bet wins 1:1!", multiplier=1)
            elif total in (2, 12):
                self.win("Field bet wins 2:1!", multiplier=2)
            else:
                self.log("Field bet loses.")

        # --- Any 7 ---
        elif self.bet_type == "Any 7":
            if total == 7:
                self.win("Any 7 bet wins 4:1!", multiplier=4)
            else:
                self.log("Any 7 bet loses.")

        # --- Craps ---
        elif self.bet_type == "Craps":
            if total in (2, 3, 12):
                self.win("Craps bet wins 7:1!", multiplier=7)
            else:
                self.log("Craps bet loses.")

        # --- Hard 4 ---
        elif self.bet_type == "Hard 4":
            if total == 4 and d1 == d2:            
                self.win("Hard 4 hits! Pays 8:1", multiplier=8)
            elif total == 4 and d1 != d2:         
                self.log("Easy 4 hit. Hard 4 loses.")
            elif total == 7:
                self.log("Seven-out. Hard 4 loses.")
            else:
                self.log(f"{total}  no decision; roll again for Hard 4.")
                return  

        # --- Hard 6 ---
        elif self.bet_type == "Hard 6":
            if total == 6 and d1 == d2:            
                self.win("Hard 6 hits! Pays 10:1", multiplier=10)
            elif total == 6 and d1 != d2:         
                self.log("Easy 6 hit. Hard 6 loses.")
            elif total == 7:
                self.log("Seven-out. Hard 6 loses.")
            else:
                self.log(f"{total}  no decision; roll again for Hard 6.")
                return  

        # --- Hard 8 ---
        elif self.bet_type == "Hard 8":
            if total == 8 and d1 == d2:            
                self.win("Hard 8 hits! Pays 10:1", multiplier=10)
            elif total == 8 and d1 != d2:         
                self.log("Easy 8 hit. Hard 8 loses.")
            elif total == 7:
                self.log("Seven-out. Hard 8 loses.")
            else:
                self.log(f"{total}  no decision; roll again for Hard 8.")
                return  

        # --- Big 6 & 8 ---
        elif self.bet_type == "Big 6 & 8":
            if total in (6, 8):
                self.win("Big 6 & 8 wins 1:1!", multiplier=1)
            else:
                self.log("Big 6 & 8 loses.")

        self.roll_button.setEnabled(False)
        self.update_balance()
        if self.balance <= 0:
            QMessageBox.information(self, "Game Over", "You are out of money.")

    def win(self, message, multiplier=1):
        payout = self.bet * (1 + multiplier)
        self.balance += payout
        self.log(message)

    def update_balance(self):
        self.balance_label.setText(f"Balance: ${self.balance}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = CrapsWindow()
    window.show()
    sys.exit(app.exec_())
